// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  username      String?       @unique
  posts         Post[]
  votes         Vote[]
  comments      Comment[]
  commentVotes  CommentVote[]
  password      String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  User      User      @relation(fields: [userId], references: [id])
  userId    String
  votes     Vote[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Vote {
  type     VoteType
  author   User     @relation(fields: [authorId], references: [id])
  authorId String
  post     Post     @relation(fields: [postId], references: [id])
  postId   String

  @@id([authorId, postId])
}

model CommentVote {
  type      VoteType
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String

  @@id([authorId, commentId])
}

model Comment {
  id           String        @id @default(cuid())
  content      String
  author       User          @relation(fields: [authorId], references: [id])
  authorId     String
  Post         Post?         @relation(fields: [postId], references: [id])
  postId       String?
  commentVotes CommentVote[]
}
